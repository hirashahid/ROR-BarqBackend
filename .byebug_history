continue
file_pathfile_pathfile_pathfile_path
exported_file.file exported_file.file 
continue
@config

@config[:api_key]
@config.api_key
@config
@c
continue
nextself.class.post('/api/customer/integration/consignment/softdata', body: create_params)
continue
base_uri
CONFIG
continue
next
@billings
continue
@billings
continue
@billings
next
@billings 
continue
@billings
continue
@billings = Billing.where(merchant_id: parent_merchant.id).where(created_at: DateTime.parse(params[:start_period]||1.week.ago.to_s).beginning_of_day..DateTime.parse(params[:end_period]||Time.current.to_s).end_of_day).order(created_at: :des
next
 mail(:to=>@email, :subject=> I18n.t('merchant.emails.new_account.subject'))
 @password = options[:password]
 @email = options[:email]
next
@email
continue 
next
params['g-recaptcha-response']
next
merchant_params
next
verify_recaptcha(model: @merchant)
next
!@merchant.valid?
next
continue 
 @merchant.errors.full_messages.to_sentence
next
 @merchant.valid?
 !@merchant.valid?
@merchant.country_id = Country.find_by_country_code('966')&.id
next
@mobile_number.blank?
next
    @merchant = Merchant.new(merchant_params.merge!(password: new_password))
 new_password = "#{SecureRandom.hex(4)}"
continue
 if !@merchant.valid?
   312:       handle_response('merchant_signup', @merchant.errors.full_messages.to_sentence, :unprocessable_entity)
   313:       return
   314:     end
@merchant.valid?
!@merchant.valid?
continue
@merchant.country_id = Country.find_by_country_code('966')&.id
reload!
@merchant.country_id = Country.find_by_country_code('966')&.id
@merchant.save
verify_recaptcha(model: @merchant)
    @merchant.country_id = Country.find_by_country_code('966')&.id
    @merchant.password = new_password
    @merchant.is_active = false
    @merchant.delivery_fee = "26"
    @merchant = Merchant.new(merchant_params.merge!(password: new_password))
    new_password = merchant_params[:password].presence || "#{SecureRandom.hex(4)}"
exit
@merchant.save
    @merchant.country_id = Country.find_by_country_code('966')&.id
    @merchant.password = new_password
    @merchant.is_active = false
    @merchant.delivery_fee = "26"
    @merchant = Merchant.new(merchant_params.merge!(password: new_password))
    new_password = merchant_params[:password].presence || "#{SecureRandom.hex(4)}"
exit
merchant_id
whereami
exit
results.where(merchant_id: merchant_id).count
merchant_id
merchat_id
results.count
exit
current_merchant.prepaid?
current_merchant.prepaid
exit
Rails.application.routes.url_helpers.admin_order_path(@order)
Rails.application.routes.url_helpers.admin_order_url(@order)
exit
Rails.application.routes.url_helpers.admin_order_url(@order)
exit
Rails.application.routes.url_helpers.admin_order_path(@order)
exit
texit
exi
continue
c
data
sueces
c
wallets.count
wallets.limit(limit).offset(offset)
wallets = wallets.joins(courier: :shipments).group('wallets.id').order('MAX(shipments.delivery_finish) ASC')
wallets.joins(courier: :shipments).group('wallets.id').order('MAX(shipments.delivery_finish) ASC')
c
url_has_coordinates?
url_has_coordinates
c
params[:order][:destination]
whereami
where am i
c
extract_coordinates(@url)
url_has_coordinates?
@url
c
url
exit
{hjid:ENV['HOTJAR_ID'].to_i,hjsv:6}
{hjid:ENV['HOTJAR_ID'],hjsv:6}
continue
abc
abcabcabc
continue
abc
c
Order.count
order
order.save
order
validate_duplicate_order_status
validate_duplicate_order
validate_merchant_wallet_balance
4
initialize_order
validate_destination
setup_hub
validate_merchant_payment_plan
validate_invoice_total
validate_customer_details
validate_payment_type
validate_connected_order_qty
validate_connected_order
validate_merchant
c
ecit
hghgvc
validate_merchantvalidate_merchanthghgv
c
is_single_item
merchant_id
c
update_inventory_merchant
self.name
c
update_inventory_merchant
c
update_inventory_merchant
c
update_inventory_merchant
c
update_inventory_merchant
c
update_inventory_merchant
c
update_inventory_merchant
c
update_inventory_merchant
c
update_inventory_merchant
id
c
Client.query(Mutation::CreateOrUpdateMerchantsMutation, variables: { merchants: merchant_payload })
merchant_payload
c
merchant_payload
c
update_inventory_merchant
      Client.query(Mutation::CreateOrUpdateMerchantsMutation, variables: { merchants: merchant_payload })
merchant_payload
resp = Client.query(Mutation::CreateOrUpdateMerchantsMutation, variables: { merchants: [merchant_payload] })
merchant_payload
exit
Client.query(Mutation::CreateOrUpdateMerchantsMutation, variables: { merchants: [merchant_payload] })
[merchant_payload]
merchant_payload
result
result = Client.query(Query::CouriersWithProductQuery, variables: { merchantId: merchant_id, sku: sku })
merchant_id = Merchant.last.id
sku = Order.last.products.first["sku"]
exit
result = Client.query(Query::CouriersWithProductQuery, variables: { merchantId: merchant_id, sku: sku })
merchant_id
merchantId
sku
sku = Order.last.products.first["sku"]
Order.last.products.first["sku"]
Order.last.products.first[:sku]
Order.last.products.first.sku
Order.last.products.first
sku = Order.last.sku
merchant_id = Merchant.last.id
Merchant.last.sku
merchant_payload
res = Client.query(Mutation::CreateOrUpdateMerchantsMutation, variables: { merchants: merchant_payload })
exit
reload!
res.errors
res
res = Client.query(Mutation::CreateOrUpdateMerchantsMutation, variables: { merchants: merchant_payload })
merchant_payload
c
fdfdfdfdfc
c
redfsdfc
c
dd
dffdfddd
c
aaa
c
aaa
cfddf
token
c
aaa
fc
c
token
c
ddddd.split(' ')[1]
exit
c
Orders::Finances::OrderBillingService.new(Order.last).sum_fees
Orders::Finances::OrderBillingService.new(Order.last, Order.last.merchant_finance).sum_fees
Order.last.merchant_finance
Orders::Finances::OrderBillingService.new(Order.last, Order.last.merchant_finance).sum_fees
Order.first.merchant_finance
Merchant.first.merchant_finance
FEES.map { |fee| send("#{fee}_fee") }.sum
@discount
FEES
exit
@url = "http://localhost:3001/admin/dashboard/current-inventory"
exit
ezit
c
    @url = "https://bb.#{domain}/#{page_id}?#{query_params.to_query}"
